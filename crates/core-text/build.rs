use std::{env, fs, path::PathBuf};

fn main() {
    // Allow conditional cfg(rust_analyzer) without triggering unexpected_cfgs lint.
    println!("cargo:rustc-check-cfg=cfg(rust_analyzer)");
    let manifest_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
    let input = manifest_dir.join("width_overrides.tsv");
    println!("cargo:rerun-if-changed={}", input.display());

    let data = fs::read_to_string(&input).expect("read width_overrides.tsv");
    let mut entries: Vec<(String, u16, String)> = Vec::new();
    for (lineno, line) in data.lines().enumerate() {
        let line = line.trim();
        if line.is_empty() || line.starts_with('#') {
            continue;
        }
        let parts: Vec<&str> = line.split('\t').collect();
        if parts.len() < 2 {
            panic!(
                "Malformed width_overrides.tsv line {}: {}",
                lineno + 1,
                line
            );
        }
        let seq = parts[0].to_string();
        let width: u16 = parts[1].parse().expect("width parse");
        let reason = parts.get(2).map(|s| s.to_string()).unwrap_or_default();
        entries.push((seq, width, reason));
    }
    // Sort for deterministic build output
    entries.sort_by(|a, b| a.0.cmp(&b.0));

    let mut code = String::new();
    code.push_str("// @generated by build.rs (Step 4.2 width override table)\n");
    code.push_str("// sequence => width, reason (for documentation only)\n");
    code.push_str("pub static OVERRIDES: &[(&str, u16)] = &[\n");
    for (seq, width, _reason) in &entries {
        // Reason intentionally omitted from runtime table (could be added later if needed)
        code.push_str(&format!(
            "    (\"{}\", {}),\n",
            escape_rust_string(seq),
            width
        ));
    }
    code.push_str("];\n");
    code.push_str(&format!(
        "pub const OVERRIDES_COUNT: usize = {};\n",
        entries.len()
    ));

    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    fs::write(out_dir.join("generated_width_overrides.rs"), code)
        .expect("write generated overrides");
}

fn escape_rust_string(s: &str) -> String {
    let mut out = String::new();
    for ch in s.chars() {
        match ch {
            '\\' => out.push_str("\\\\"),
            '"' => out.push_str("\\\""),
            _ => out.push(ch),
        }
    }
    out
}
